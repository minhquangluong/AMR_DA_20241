import rclpy
from rclpy.node import Node
from tf2_ros import TransformBroadcaster
from geometry_msgs.msg import TransformStamped
from nav_msgs.msg import Odometry
from std_msgs.msg import Float64MultiArray
from math import sin, cos, pi, atan2

class OdomPublisher(Node):
    def __init__(self):
        super().__init__('odom_publisher')

        # Publisher and Subscriber
        self.odom_pub = self.create_publisher(Odometry, '/odom', 10)
        self.tf_broadcaster = TransformBroadcaster(self)
        self.create_subscription(Float64MultiArray, 'wheel_velocity', self.velocity_callback, 10)

        # Robot state
        self.x = 0.0
        self.y = 0.0
        self.theta = 0.0

        # Parameters
        self.declare_parameter('wheel_base', 0.3)  # Chiều rộng giữa hai bánh xe (m)
        self.declare_parameter('wheel_radius', 0.08)  # Bán kính bánh xe (m)
        self.wheel_base = self.get_parameter('wheel_base').value
        self.wheel_radius = self.get_parameter('wheel_radius').value

        # Thời gian trước đó để tính delta thời gian
        self.last_time = self.get_clock().now()

    def velocity_callback(self, msg):
        # Nhận vận tốc bánh trái và phải (theo rad/s)
        v_left = msg.data[0] * self.wheel_radius  # Vận tốc tuyến tính bánh trái (m/s)
        v_right = msg.data[1] * self.wheel_radius  # Vận tốc tuyến tính bánh phải (m/s)

        # Tính toán vận tốc tuyến tính và vận tốc góc của robot
        v = (v_left + v_right) / 2.0
        omega = (v_right - v_left) / self.wheel_base

        # Tính toán delta thời gian
        current_time = self.get_clock().now()
        dt = (current_time - self.last_time).nanoseconds / 1e9  # Đổi từ nanosecond sang giây
        self.last_time = current_time

        # Cập nhật vị trí và góc quay của robot
        delta_x = v * cos(self.theta) * dt
        delta_y = v * sin(self.theta) * dt
        delta_theta = omega * dt

        self.x += delta_x
        self.y += delta_y
        self.theta = self.normalize_angle(self.theta + delta_theta)

        # Phát dữ liệu odometry
        self.publish_odom(v, omega)

        # Phát tf từ odom -> base_link
        self.publish_tf()

    def publish_odom(self, linear_vel, angular_vel):
        odom_msg = Odometry()
        odom_msg.header.stamp = self.get_clock().now().to_msg()
        odom_msg.header.frame_id = 'odom'
        odom_msg.child_frame_id = 'base_footprint'

        # Pose (vị trí và góc quay)
        odom_msg.pose.pose.position.x = self.x
        odom_msg.pose.pose.position.y = self.y
        odom_msg.pose.pose.position.z = 0.0
        q = self.euler_to_quaternion(0, 0, self.theta)
        odom_msg.pose.pose.orientation.x = q[0]
        odom_msg.pose.pose.orientation.y = q[1]
        odom_msg.pose.pose.orientation.z = q[2]
        odom_msg.pose.pose.orientation.w = q[3]

        # Twist (vận tốc)
        odom_msg.twist.twist.linear.x = linear_vel
        odom_msg.twist.twist.angular.z = angular_vel

        self.odom_pub.publish(odom_msg)

    def publish_tf(self):
        tf_msg = TransformStamped()
        tf_msg.header.stamp = self.get_clock().now().to_msg()
        tf_msg.header.frame_id = 'odom'
        tf_msg.child_frame_id = 'base_footprint'

        tf_msg.transform.translation.x = self.x
        tf_msg.transform.translation.y = self.y
        tf_msg.transform.translation.z = 0.0
        q = self.euler_to_quaternion(0, 0, self.theta)
        tf_msg.transform.rotation.x = q[0]
        tf_msg.transform.rotation.y = q[1]
        tf_msg.transform.rotation.z = q[2]
        tf_msg.transform.rotation.w = q[3]

        self.tf_broadcaster.sendTransform(tf_msg)

    def euler_to_quaternion(self, roll, pitch, yaw):
        qx = sin(roll / 2) * cos(pitch / 2) * cos(yaw / 2) - cos(roll / 2) * sin(pitch / 2) * sin(yaw / 2)
        qy = cos(roll / 2) * sin(pitch / 2) * cos(yaw / 2) + sin(roll / 2) * cos(pitch / 2) * sin(yaw / 2)
        qz = cos(roll / 2) * cos(pitch / 2) * sin(yaw / 2) - sin(roll / 2) * sin(pitch / 2) * cos(yaw / 2)
        qw = cos(roll / 2) * cos(pitch / 2) * cos(yaw / 2) + sin(roll / 2) * sin(pitch / 2) * sin(yaw / 2)
        return (qx, qy, qz, qw)

    def normalize_angle(self, angle):
        return atan2(sin(angle), cos(angle))

def main():
    rclpy.init()
    odom_publisher = OdomPublisher()

    try:
        rclpy.spin(odom_publisher)
    finally:
        odom_publisher.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
